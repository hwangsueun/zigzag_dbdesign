
-- 사용자 테이블 생성
CREATE TABLE USERS (
    USER_ID INT PRIMARY KEY,
    EMAIL VARCHAR(255) UNIQUE,
    PHONE_NUMBER VARCHAR(20) UNIQUE,
    NAME VARCHAR(100),
    PASSWORD VARCHAR(255),
    AGE INT,
    REGISTRATION_DATE DATE,
    LAST_LOGIN TIMESTAMP,
    ACCOUNT_DELETE_TIME TIMESTAMP,
    STATUS VARCHAR(50)
);


CREATE TABLE USER_ADDRESS (
    USER_ID INT,
    ADDRESS_NAME VARCHAR(50),
    ADDCODE VARCHAR(5),
    DETAIL_ADD VARCHAR(50),
    PRIMARY KEY (USER_ID, ADDRESS_NAME),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE POINTS (
    USER_ID INT,
    POINTS INT,  -- 포인트 적립은 양수(+), 사용은 음수(-)로 표현
    TRANSACTION_SEQUENCE INT,
    TRANSACTION_DATE DATE,
    PRIMARY KEY (USER_ID, TRANSACTION_SEQUENCE, TRANSACTION_DATE),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);


-- 멤버십 테이블 생성
CREATE TABLE MEMBERSHIP (
    USER_ID INT PRIMARY KEY,
    MEMBERSHIP_TIER VARCHAR(50),
    ANNUAL_PURCHASE_AMOUNT DECIMAL,
    TIER_START_DATE DATE,
   	LAST_UPDATED_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- 판매자 테이블 생성
CREATE TABLE SELLERS (
    SELLER_ID INT PRIMARY KEY,
    BUSINESS_NUM VARCHAR(255) UNIQUE
);

-- 상점 테이블 생성
CREATE TABLE SHOPS (
    SHOP_ID INT PRIMARY KEY,
    SELLER_ID INT,
    SHOP_NAME VARCHAR(255),
    CONTACT_NUMBER VARCHAR(255),
    FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID)
);

-- 상품 테이블 생성
CREATE TABLE PRODUCTS (
    SHOP_ID INT,
    NUM INT,
    PRODUCT_NAME VARCHAR(255),
    PRICE DECIMAL,
    CATEGORY_NAME VARCHAR(100),
    QUANTITY INT,
    COLOR VARCHAR(50),
    SIZES VARCHAR(50),
    PRIMARY KEY (SHOP_ID, NUM),
    FOREIGN KEY (SHOP_ID) REFERENCES SHOPS(SHOP_ID)
);

-- 상품 태그 테이블 생성
CREATE TABLE PRODUCT_TAGS (
    SHOP_ID INT,
    NUM INT,
    TAGS VARCHAR(255),
    PRIMARY KEY (SHOP_ID, NUM),
    FOREIGN KEY (SHOP_ID, NUM) REFERENCES PRODUCTS(SHOP_ID, NUM)
);

-- 할인 테이블 생성
CREATE TABLE DISCOUNT (
    SHOP_ID INT,
    NUM INT,
    DISCOUNT_RATE DECIMAL,
    DISCOUNT_TYPE VARCHAR(50),
    DISCOUNT_START_DATE DATE,
    DISCOUNT_END_DATE DATE,
    PRIMARY KEY (SHOP_ID, NUM),
    FOREIGN KEY (SHOP_ID, NUM) REFERENCES PRODUCTS(SHOP_ID, NUM)
);

-- 상품 상태 테이블 생성
CREATE TABLE PRODUCT_STATUS (
    SHOP_ID INT,
    NUM INT,
    STATUS VARCHAR(50),
    STOCK_STATUS INT,
    PRIMARY KEY (SHOP_ID, NUM),
    FOREIGN KEY (SHOP_ID, NUM) REFERENCES PRODUCTS(SHOP_ID, NUM)
);

-- 카트 테이블 생성
CREATE TABLE CARTS (
    USER_ID INT,
    SHOP_ID INT,
    NUM INT,
    QUANTITY INT,
    ADDED_DATE DATE,
    PRIMARY KEY (USER_ID, SHOP_ID, NUM),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (SHOP_ID, NUM) REFERENCES PRODUCTS(SHOP_ID, NUM)
);

-- 주문 테이블 생성
CREATE TABLE ORDERS (
    ORDER_ID INT PRIMARY KEY,
    USER_ID INT,
    ORDER_DATE DATE,
    ORDER_STATUS VARCHAR(50),
    TOTAL_AMOUNT INT,
    PAYMENT_METHOD VARCHAR(50),
    PAYMENT_TIME TIMESTAMP,
    PAYMENT_STATUS VARCHAR(50),
    SHIPPING_STATUS VARCHAR(50),
    TRACKING_NUMBER VARCHAR(100),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- 주문 항목 테이블 생성
CREATE TABLE ORDER_ITEMS (
    ORDER_ID INT,
    SHOP_ID INT,
    NUM INT,
    QUANTITY INT,
    ORDER_PRICE DECIMAL,
    IS_REFUNDED CHAR(1) DEFAULT 'N',
    PRIMARY KEY (ORDER_ID, SHOP_ID, NUM),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
    FOREIGN KEY (SHOP_ID, NUM) REFERENCES PRODUCTS(SHOP_ID, NUM)
);


-- 교환 및 환불 요청 테이블 생성
CREATE TABLE RETURNS_AND_EXCHANGES (
   USER_ID NUMBER,
   ORDER_ID NUMBER,
   SHOP_ID NUMBER,
   NUM NUMBER,
   TYPE VARCHAR2(50),
   REQUEST_DATE DATE,
   REASON VARCHAR2(255),
   REASON_ADD CLOB,
   STATUS VARCHAR2(50),
   CONSTRAINT returns_pk PRIMARY KEY (ORDER_ID, SHOP_ID, NUM),
   CONSTRAINT returns_user_fk FOREIGN KEY (USER_ID) 
       REFERENCES USERS(USER_ID),
   CONSTRAINT returns_order_fk FOREIGN KEY (ORDER_ID) 
       REFERENCES ORDERS(ORDER_ID),
   CONSTRAINT returns_product_fk FOREIGN KEY (SHOP_ID, NUM) 
       REFERENCES PRODUCTS(SHOP_ID, NUM)
);

-- 리뷰 테이블 생성
CREATE TABLE REVIEWS (
    USER_ID NUMBER,
    ORDER_ID NUMBER,
    SHOP_ID NUMBER,
    NUM NUMBER,
    REVIEW_CONTENT CLOB,
    RATING NUMBER,
    REVIEW_DATE DATE,
    CONSTRAINT reviews_pk PRIMARY KEY (USER_ID, ORDER_ID, SHOP_ID, NUM),
    CONSTRAINT reviews_user_fk FOREIGN KEY (USER_ID) 
        REFERENCES USERS(USER_ID),
    CONSTRAINT reviews_order_fk FOREIGN KEY (ORDER_ID) 
        REFERENCES ORDERS(ORDER_ID),
    CONSTRAINT reviews_product_fk FOREIGN KEY (SHOP_ID, NUM) 
        REFERENCES PRODUCTS(SHOP_ID, NUM)
);


-- 판매자 답변 테이블 생성
CREATE TABLE REPLY (
    ORDER_ID NUMBER,
    SHOP_ID NUMBER,
    NUM NUMBER,
    USER_ID NUMBER,    -- 추가됨
    REPLY_CONTENT CLOB,
    REPLY_AT DATE,
    SELLER_ID NUMBER,
    CONSTRAINT reply_pk PRIMARY KEY (USER_ID, ORDER_ID, SHOP_ID, NUM),
    CONSTRAINT reply_review_fk FOREIGN KEY (USER_ID, ORDER_ID, SHOP_ID, NUM) 
        REFERENCES REVIEWS(USER_ID, ORDER_ID, SHOP_ID, NUM),
    CONSTRAINT reply_seller_fk FOREIGN KEY (SELLER_ID) 
        REFERENCES SELLERS(SELLER_ID)
);

-- 1:1 문의 테이블 생성
CREATE TABLE INQUIRIES (
   USER_ID NUMBER,
   SHOP_ID NUMBER,
   NUM NUMBER,
   INQUIRY_CONTENT CLOB,
   INQUIRY_DATE DATE,
   RESPONSE_CONTENT CLOB,
   RESPONSE_DATE DATE,
   SELLER_ID NUMBER,
   CONSTRAINT inquiries_pk PRIMARY KEY (USER_ID, SHOP_ID, NUM),
   CONSTRAINT inquiries_user_fk FOREIGN KEY (USER_ID) 
       REFERENCES USERS(USER_ID),
   CONSTRAINT inquiries_product_fk FOREIGN KEY (SHOP_ID, NUM) 
       REFERENCES PRODUCTS(SHOP_ID, NUM),
   CONSTRAINT inquiries_seller_fk FOREIGN KEY (SELLER_ID) 
       REFERENCES SELLERS(SELLER_ID)
);

-- 관심목록 테이블 생성
CREATE TABLE WISHLIST (
    USER_ID INT,
    SHOP_ID INT,
    NUM INT,
    ADDED_DATE DATE,
    PRIMARY KEY (USER_ID, SHOP_ID, NUM),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (SHOP_ID, NUM) REFERENCES PRODUCTS(SHOP_ID, NUM)
);


-- 추천목록 테이블 생성
CREATE TABLE RECOMMEND (
    USER_ID INT,
    SHOP_ID INT,
    NUM INT,
    PRIMARY KEY (USER_ID, SHOP_ID, NUM),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (SHOP_ID, NUM) REFERENCES Products(SHOP_ID, NUM)
);

--- user 테이블 샘플 데이터
INSERT ALL
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS) 
VALUES (1, 'kim.minho@email.com', '010-1234-5678', '김민호', 'hashed_password_123', 28, TO_DATE('2023-01-15', 'YYYY-MM-DD'), TO_DATE('2024-12-07 14:30:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'ACTIVE')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS) 
VALUES (2, 'lee.jieun@email.com', '010-2345-6789', '이지은', 'hashed_password_456', 32, TO_DATE('2023-02-20', 'YYYY-MM-DD'), TO_DATE('2024-12-08 09:15:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'ACTIVE')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS) 
VALUES (3, 'park.jisung@email.com', '010-3456-7890', '박지성', 'hashed_password_789', 25, TO_DATE('2023-03-10', 'YYYY-MM-DD'), TO_DATE('2024-12-06 18:45:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'ACTIVE')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS) 
VALUES (5, 'jung.woosung@email.com', '010-5678-9012', '정우성', 'hashed_password_345', 35, TO_DATE('2023-05-12', 'YYYY-MM-DD'), TO_DATE('2024-12-08 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'ACTIVE')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS)
VALUES (4, 'choi.yuna@email.com', '010-4567-8901', '최유나', 'hashed_password_012', 41, TO_DATE('2023-04-05', 'YYYY-MM-DD'), TO_DATE('2024-11-30 11:20:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2024-12-07 16:30:00', 'YYYY-MM-DD HH24:MI:SS'), 'DELETED')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS)
VALUES (6, 'han.hyojoo@email.com', '010-6789-0123', '한효주', 'hashed_password_678', 29, TO_DATE('2023-06-25', 'YYYY-MM-DD'), TO_DATE('2024-12-05 13:40:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'SUSPENDED')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS)
VALUES (7, 'song.joongki@email.com', '010-7890-1234', '송중기', 'hashed_password_901', 38, TO_DATE('2023-07-30', 'YYYY-MM-DD'), TO_DATE('2024-12-07 20:10:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'ACTIVE')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS)
VALUES (8, 'bae.suzy@email.com', '010-8901-2345', '배수지', 'hashed_password_234', 27, TO_DATE('2023-08-15', 'YYYY-MM-DD'), TO_DATE('2024-12-08 10:25:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'ACTIVE')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS)
VALUES (9, 'yoo.jaesuk@email.com', '010-9012-3456', '유재석', 'hashed_password_567', 45, TO_DATE('2023-09-20', 'YYYY-MM-DD'), TO_DATE('2024-12-01 15:55:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2024-12-06 09:30:00', 'YYYY-MM-DD HH24:MI:SS'), 'DELETED')
INTO USERS (USER_ID, EMAIL, PHONE_NUMBER, NAME, PASSWORD, AGE, REGISTRATION_DATE, LAST_LOGIN, ACCOUNT_DELETE_TIME, STATUS)
VALUES (10, 'im.yoona@email.com', '010-0123-4567', '임윤아', 'hashed_password_890', 31, TO_DATE('2023-10-10', 'YYYY-MM-DD'), TO_DATE('2024-12-08 07:30:00', 'YYYY-MM-DD HH24:MI:SS'), NULL, 'ACTIVE')
SELECT * FROM DUAL;

--주소 데이터
-- USER_ADDRESS 테이블 샘플 데이터
INSERT ALL
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (1, '집', '06234', '201호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (1, '회사', '06586', '더블루빌딩 5층')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (2, '자택', '13494', '판교아파트 1003동 502호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (3, '집', '21994', '연수푸르지오 123동 1502호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (3, '배송지2', '05502', '롯데캐슬 502호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (4, '기본배송지', '48099', '해운대두산위브 2304호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (5, '집주소', '42181', '수성파크푸르지오 1201호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (5, '회사주소', '41169', '동대구빌딩 3층')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (6, '집', '06235', '202호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (6, '회사', '06587', '더블루빌딩 6층')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (7, '자택', '13495', '판교아파트 1004동 503호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (8, '집', '21995', '연수푸르지오 124동 1503호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (8, '배송지2', '05503', '롯데캐슬 503호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (9, '기본배송지', '48100', '해운대두산위브 2305호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (10, '집주소', '42182', '수성파크푸르지오 1202호')
  INTO USER_ADDRESS (USER_ID, ADDRESS_NAME, ADDCODE, DETAIL_ADD)
    VALUES (10, '회사주소', '41170', '동대구빌딩 4층')
SELECT * FROM dual;



-- POINTS 테이블 샘플 데이터
INSERT ALL
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (1, 1000, 1, DATE '2024-01-01')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (1, -500, 2, DATE '2024-01-01')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (2, 3000, 1, DATE '2024-01-15')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (2, -1000, 2, DATE '2024-01-15')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (3, 5000, 1, DATE '2024-01-20')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (3, -2000, 2, DATE '2024-01-20')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (4, 1500, 1, DATE '2024-02-01')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (5, 2500, 1, DATE '2024-01-10')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (6, 800, 1, DATE '2024-01-05')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (6, -300, 2, DATE '2024-01-05')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (7, 1200, 1, DATE '2024-01-07')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (7, -400, 2, DATE '2024-01-07')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (8, 950, 1, DATE '2024-01-09')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (9, 2200, 1, DATE '2024-01-02')
  INTO POINTS (USER_ID, POINTS, TRANSACTION_SEQUENCE, TRANSACTION_DATE)
    VALUES (10, 1300, 1, DATE '2024-01-01')
SELECT * FROM dual;


INSERT ALL
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (1, 'GOLD', 1200000, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-15', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (2, 'SILVER', 800000, TO_DATE('2024-02-15', 'YYYY-MM-DD'), TO_DATE('2024-12-10', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (3, 'PLATINUM', 2500000, TO_DATE('2024-03-01', 'YYYY-MM-DD'), TO_DATE('2024-12-12', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (4, 'BRONZE', 50000, TO_DATE('2024-04-20', 'YYYY-MM-DD'), TO_DATE('2024-12-05', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (5, 'GOLD', 1500000, TO_DATE('2024-05-10', 'YYYY-MM-DD'), TO_DATE('2024-12-08', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (6, 'BRONZE', 30000, TO_DATE('2024-06-15', 'YYYY-MM-DD'), TO_DATE('2024-12-14', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (7, 'SILVER', 600000, TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2024-12-09', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (8, 'BRONZE', 80000, TO_DATE('2024-08-10', 'YYYY-MM-DD'), TO_DATE('2024-12-13', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (9, 'PLATINUM', 2700000, TO_DATE('2024-09-05', 'YYYY-MM-DD'), TO_DATE('2024-12-07', 'YYYY-MM-DD'))
  INTO MEMBERSHIP (USER_ID, MEMBERSHIP_TIER, ANNUAL_PURCHASE_AMOUNT, TIER_START_DATE, LAST_UPDATED_DATE)
    VALUES (10, 'SILVER', 500000, TO_DATE('2024-10-20', 'YYYY-MM-DD'), TO_DATE('2024-12-11', 'YYYY-MM-DD'))
SELECT * FROM dual;


-- SELLERS 테이블 샘플 데이터
INSERT ALL
INTO SELLERS (SELLER_ID, BUSINESS_NUM) 
VALUES (1, '123-45-67890')
INTO SELLERS (SELLER_ID, BUSINESS_NUM)
VALUES (2, '234-56-78901')
INTO SELLERS (SELLER_ID, BUSINESS_NUM)
VALUES (3, '345-67-89012')
INTO SELLERS (SELLER_ID, BUSINESS_NUM)
VALUES (4, '456-78-90123')
INTO SELLERS (SELLER_ID, BUSINESS_NUM)
VALUES (5, '567-89-01234')
SELECT * FROM DUAL;

-- SHOPS 테이블 샘플 데이터
INSERT ALL
INTO SHOPS (SHOP_ID, SELLER_ID, SHOP_NAME, CONTACT_NUMBER) 
VALUES (1, 1, '스타일하우스', '02-1234-5678')
INTO SHOPS (SHOP_ID, SELLER_ID, SHOP_NAME, CONTACT_NUMBER)
VALUES (2, 2, '패션플러스', '02-2345-6789')
INTO SHOPS (SHOP_ID, SELLER_ID, SHOP_NAME, CONTACT_NUMBER)
VALUES (3, 3, '트렌디샵', '02-3456-7890')
INTO SHOPS (SHOP_ID, SELLER_ID, SHOP_NAME, CONTACT_NUMBER)
VALUES (4, 4, '뷰티코너', '02-4567-8901')
INTO SHOPS (SHOP_ID, SELLER_ID, SHOP_NAME, CONTACT_NUMBER)
VALUES (5, 5, '디자인마켓', '02-5678-9012')
SELECT * FROM DUAL;

-- PRODUCTS 테이블 샘플 데이터
INSERT ALL
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (1, 1, '베이직 티셔츠', 29900, '티셔츠', 100, '화이트', 'M')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (1, 2, '슬림핏 청바지', 59900, '팬츠', 50, '블루', '30')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (2, 1, '캐주얼 셔츠', 45000, '셔츠', 75, '베이지', 'L')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (2, 2, '니트 스웨터', 68000, '니트/스웨터', 60, '그레이', 'XL')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (3, 1, '트렌치 코트', 159000, '아우터', 40, '베이지', 'L')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (3, 2, '울 캐시미어 머플러', 35000, '패션잡화', 80, '네이비', 'FREE')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (4, 1, '캐시미어 가디건', 128000, '니트/스웨터', 45, '크림', 'M')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (4, 2, '울 블레이저', 198000, '아우터', 30, '블랙', 'S')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (5, 1, '린넨 셔츠', 55000, '셔츠', 70, '화이트', 'L')
INTO PRODUCTS (SHOP_ID, NUM, PRODUCT_NAME, PRICE, CATEGORY_NAME, QUANTITY, COLOR, SIZES)
VALUES (5, 2, '코튼 후드티', 49000, '티셔츠', 100, '그레이', 'M')
SELECT * FROM DUAL;

-- PRODUCT_TAGS 테이블 샘플 데이터
INSERT ALL
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (1, 1, '베이직,데일리,면100%,반팔,여름')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (1, 2, '청바지,데님,슬림핏,사계절,스트레치')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (2, 1, '셔츠,베이직,봄,가을,오피스룩')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (2, 2, '니트,겨울,따뜻한,데일리,울혼방')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (3, 1, '트렌치코트,봄,가을,클래식,데일리')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (3, 2, '머플러,겨울,캐시미어,고급스러운,선물추천')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (4, 1, '가디건,캐시미어,프리미엄,가을,겨울')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (4, 2, '블레이저,자켓,오피스룩,울소재,정장')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (5, 1, '셔츠,린넨,여름,시원한,내추럴')
  INTO PRODUCT_TAGS (SHOP_ID, NUM, TAGS) VALUES (5, 2, '후드티,데일리,캐주얼,스포티,면100%')
SELECT * FROM dual;


-- DISCOUNT 테이블 샘플 데이터 
INSERT ALL
  INTO DISCOUNT (SHOP_ID, NUM, DISCOUNT_RATE, DISCOUNT_TYPE, DISCOUNT_START_DATE, DISCOUNT_END_DATE)
    VALUES (1, 1, 10, '정률할인', TO_DATE('2024-12-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'))
  INTO DISCOUNT (SHOP_ID, NUM, DISCOUNT_RATE, DISCOUNT_TYPE, DISCOUNT_START_DATE, DISCOUNT_END_DATE)
    VALUES (2, 1, 5000, '정액할인', TO_DATE('2024-12-01', 'YYYY-MM-DD'), TO_DATE('2024-12-15', 'YYYY-MM-DD'))
  INTO DISCOUNT (SHOP_ID, NUM, DISCOUNT_RATE, DISCOUNT_TYPE, DISCOUNT_START_DATE, DISCOUNT_END_DATE)
    VALUES (3, 1, 15, '정률할인', TO_DATE('2024-12-10', 'YYYY-MM-DD'), TO_DATE('2024-12-25', 'YYYY-MM-DD'))
  INTO DISCOUNT (SHOP_ID, NUM, DISCOUNT_RATE, DISCOUNT_TYPE, DISCOUNT_START_DATE, DISCOUNT_END_DATE)
    VALUES (4, 1, 3000, '정액할인', TO_DATE('2024-12-05', 'YYYY-MM-DD'), TO_DATE('2024-12-20', 'YYYY-MM-DD'))
SELECT * FROM dual;

-- PRODUCT_STATUS 테이블 수정된 샘플 데이터 (상태를 3가지로 제한)
INSERT ALL
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (1, 1, '판매중', 100)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (1, 2, '판매중', 50)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (2, 1, '판매중', 75)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (2, 2, '품절', 0)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (3, 1, '판매중', 40)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (3, 2, '판매중지', 80)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (4, 1, '판매중', 45)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (4, 2, '판매중', 30)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (5, 1, '판매중', 70)
  INTO PRODUCT_STATUS (SHOP_ID, NUM, STATUS, STOCK_STATUS) VALUES (5, 2, '품절', 0)
SELECT * FROM DUAL;

-- CARTS 테이블 샘플 데이터
INSERT ALL
  INTO CARTS (USER_ID, SHOP_ID, NUM, QUANTITY, ADDED_DATE) VALUES (1, 1, 1, 2, TO_DATE('2024-12-07', 'YYYY-MM-DD'))
  INTO CARTS (USER_ID, SHOP_ID, NUM, QUANTITY, ADDED_DATE) VALUES (1, 2, 1, 1, TO_DATE('2024-12-07', 'YYYY-MM-DD'))
  INTO CARTS (USER_ID, SHOP_ID, NUM, QUANTITY, ADDED_DATE) VALUES (2, 3, 1, 1, TO_DATE('2024-12-08', 'YYYY-MM-DD'))
  INTO CARTS (USER_ID, SHOP_ID, NUM, QUANTITY, ADDED_DATE) VALUES (3, 4, 1, 3, TO_DATE('2024-12-08', 'YYYY-MM-DD'))
  INTO CARTS (USER_ID, SHOP_ID, NUM, QUANTITY, ADDED_DATE) VALUES (5, 5, 1, 2, TO_DATE('2024-12-08', 'YYYY-MM-DD'))
SELECT * FROM DUAL;


-- ORDERS 테이블 샘플 데이터
INSERT ALL
INTO ORDERS (ORDER_ID, USER_ID, ORDER_DATE, ORDER_STATUS, TOTAL_AMOUNT, PAYMENT_METHOD, PAYMENT_TIME, PAYMENT_STATUS, SHIPPING_STATUS, TRACKING_NUMBER) 
VALUES (1, 1, TO_DATE('2024-12-01', 'YYYY-MM-DD'), '배송완료', 89700, '신용카드', 
   TO_DATE('2024-12-01 10:30:00', 'YYYY-MM-DD HH24:MI:SS'), '결제완료', '배송완료', 'TRACK123456')
INTO ORDERS (ORDER_ID, USER_ID, ORDER_DATE, ORDER_STATUS, TOTAL_AMOUNT, PAYMENT_METHOD, PAYMENT_TIME, PAYMENT_STATUS, SHIPPING_STATUS, TRACKING_NUMBER) 
VALUES (2, 2, TO_DATE('2024-12-02', 'YYYY-MM-DD'), '배송중', 45000, '카카오페이',
   TO_DATE('2024-12-02 15:45:00', 'YYYY-MM-DD HH24:MI:SS'), '결제완료', '배송중', 'TRACK234567')
INTO ORDERS (ORDER_ID, USER_ID, ORDER_DATE, ORDER_STATUS, TOTAL_AMOUNT, PAYMENT_METHOD, PAYMENT_TIME, PAYMENT_STATUS, SHIPPING_STATUS, TRACKING_NUMBER) 
VALUES (3, 3, TO_DATE('2024-12-03', 'YYYY-MM-DD'), '주문확인', 76000, '네이버페이',
   TO_DATE('2024-12-03 09:20:00', 'YYYY-MM-DD HH24:MI:SS'), '결제완료', '상품준비중', NULL)
INTO ORDERS (ORDER_ID, USER_ID, ORDER_DATE, ORDER_STATUS, TOTAL_AMOUNT, PAYMENT_METHOD, PAYMENT_TIME, PAYMENT_STATUS, SHIPPING_STATUS, TRACKING_NUMBER) 
VALUES (4, 5, TO_DATE('2024-12-04', 'YYYY-MM-DD'), '배송완료', 114000, '신용카드',
   TO_DATE('2024-12-04 14:15:00', 'YYYY-MM-DD HH24:MI:SS'), '결제완료', '배송완료', 'TRACK345678')
INTO ORDERS (ORDER_ID, USER_ID, ORDER_DATE, ORDER_STATUS, TOTAL_AMOUNT, PAYMENT_METHOD, PAYMENT_TIME, PAYMENT_STATUS, SHIPPING_STATUS, TRACKING_NUMBER) 
VALUES (5, 7, TO_DATE('2024-12-05', 'YYYY-MM-DD'), '배송중', 63000, '무통장입금',
   TO_DATE('2024-12-05 11:30:00', 'YYYY-MM-DD HH24:MI:SS'), '결제완료', '배송중', 'TRACK456789')
SELECT * FROM DUAL;

-- ORDER_ITEMS 테이블 샘플 데이터
INSERT ALL 
INTO ORDER_ITEMS (ORDER_ID, SHOP_ID, NUM, QUANTITY, ORDER_PRICE) 
VALUES (1, 1, 1, 3, 89700)
INTO ORDER_ITEMS (ORDER_ID, SHOP_ID, NUM, QUANTITY, ORDER_PRICE) 
VALUES (2, 2, 1, 1, 45000)
INTO ORDER_ITEMS (ORDER_ID, SHOP_ID, NUM, QUANTITY, ORDER_PRICE) 
VALUES (3, 3, 1, 1, 76000)
INTO ORDER_ITEMS (ORDER_ID, SHOP_ID, NUM, QUANTITY, ORDER_PRICE) 
VALUES (4, 1, 2, 2, 114000)
INTO ORDER_ITEMS (ORDER_ID, SHOP_ID, NUM, QUANTITY, ORDER_PRICE) 
VALUES (5, 4, 1, 2, 63000)
SELECT * FROM DUAL;

-- RETURNS_AND_EXCHANGES 테이블 수정된 샘플 데이터 (거절 케이스 추가)
INSERT ALL
INTO RETURNS_AND_EXCHANGES (USER_ID, ORDER_ID, SHOP_ID, NUM, TYPE, REQUEST_DATE, REASON, REASON_ADD, STATUS)
VALUES (1, 1, 1, 1, '교환', 
   TO_DATE('2024-12-05', 'YYYY-MM-DD'), 
   '사이즈 안맞음', 
   '한 사이즈 큰 것으로 교환 요청', 
   '처리중')
INTO RETURNS_AND_EXCHANGES (USER_ID, ORDER_ID, SHOP_ID, NUM, TYPE, REQUEST_DATE, REASON, REASON_ADD, STATUS)
VALUES (3, 3, 3, 1, '교환', 
   TO_DATE('2024-12-07', 'YYYY-MM-DD'), 
   '상품 하자',
   '옷 봉제선이 터졌어요',
   '거절')
INTO RETURNS_AND_EXCHANGES (USER_ID, ORDER_ID, SHOP_ID, NUM, TYPE, REQUEST_DATE, REASON, REASON_ADD, STATUS)
VALUES (4, 4, 1, 2, '반품', 
   TO_DATE('2024-12-08', 'YYYY-MM-DD'), 
   '단순변심',
   '디자인이 마음에 들지 않아요',
   '거절')
INTO RETURNS_AND_EXCHANGES (USER_ID, ORDER_ID, SHOP_ID, NUM, TYPE, REQUEST_DATE, REASON, REASON_ADD, STATUS)
VALUES (5, 5, 4, 1, '교환', 
   TO_DATE('2024-12-09', 'YYYY-MM-DD'), 
   '사이즈 안맞음',
   '작은 사이즈로 교환 원합니다',
   '승인')
SELECT * FROM DUAL;

-- REVIEWS 테이블 샘플 데이터 (SHOP, NUM 11로 별점 확인)
INSERT ALL
INTO REVIEWS (USER_ID, ORDER_ID, SHOP_ID, NUM, REVIEW_CONTENT, RATING, REVIEW_DATE)
VALUES (1, 1, 1, 1, '좋은 상품입니다. 다음에도 구매하고 싶어요', 5, 
    TO_DATE('2024-12-06', 'YYYY-MM-DD'))
INTO REVIEWS (USER_ID, ORDER_ID, SHOP_ID, NUM, REVIEW_CONTENT, RATING, REVIEW_DATE)
VALUES (2, 2, 2, 1, '배송이 빨라서 좋았어요', 4, 
    TO_DATE('2024-12-07', 'YYYY-MM-DD'))
INTO REVIEWS (USER_ID, ORDER_ID, SHOP_ID, NUM, REVIEW_CONTENT, RATING, REVIEW_DATE)
VALUES (3, 3, 3, 1, '품질이 생각보다 별로네요', 2, 
    TO_DATE('2024-12-08', 'YYYY-MM-DD'))
INTO REVIEWS (USER_ID, ORDER_ID, SHOP_ID, NUM, REVIEW_CONTENT, RATING, REVIEW_DATE)
VALUES (5, 4, 1, 1, '매우 만족합니다. 사이즈도 잘 맞고 재질도 좋아요', 5, 
    TO_DATE('2024-12-09', 'YYYY-MM-DD'))
INTO REVIEWS (USER_ID, ORDER_ID, SHOP_ID, NUM, REVIEW_CONTENT, RATING, REVIEW_DATE)
VALUES (7, 5, 1, 1, '색상이 조금 다르긴 하지만 전체적으로 만족합니다', 4, 
    TO_DATE('2024-12-10', 'YYYY-MM-DD'))
SELECT * FROM DUAL;

-- REPLY 테이블 샘플 데이터
INSERT ALL 
INTO REPLY (USER_ID, ORDER_ID, SHOP_ID, NUM, REPLY_CONTENT, REPLY_AT, SELLER_ID)
VALUES (1, 1, 1, 1, '소중한 후기 감사합니다. 앞으로도 좋은 상품으로 보답하겠습니다.', 
    TO_DATE('2024-12-07', 'YYYY-MM-DD'), 
    1)
INTO REPLY (USER_ID, ORDER_ID, SHOP_ID, NUM, REPLY_CONTENT, REPLY_AT, SELLER_ID)
VALUES (3, 3, 3, 1, '불편을 드려 죄송합니다. 더 나은 품질로 보답하겠습니다.', 
    TO_DATE('2024-12-09', 'YYYY-MM-DD'), 
    3)
SELECT * FROM DUAL;

-- INQUIRIES 테이블 샘플 데이터
INSERT ALL
INTO INQUIRIES (USER_ID, SHOP_ID, NUM, INQUIRY_CONTENT, INQUIRY_DATE, RESPONSE_CONTENT, RESPONSE_DATE, SELLER_ID)
VALUES (1, 1, 1, '이 상품 재입고 언제 되나요?', 
   TO_DATE('2024-12-05', 'YYYY-MM-DD'), 
   '다음 주 중으로 입고될 예정입니다.', 
   TO_DATE('2024-12-06', 'YYYY-MM-DD'), 
   1)
INTO INQUIRIES (USER_ID, SHOP_ID, NUM, INQUIRY_CONTENT, INQUIRY_DATE, RESPONSE_CONTENT, RESPONSE_DATE, SELLER_ID)
    VALUES (2, 2, 1, 'm은 총 기장이 어떻게 되나요?', TO_DATE('2024-12-06', 'YYYY-MM-DD'), '총장 68입니다.', TO_DATE('2024-12-07', 'YYYY-MM-DD'), 2)
SELECT * FROM DUAL;


-- WISHLIST 테이블 샘플 데이터
INSERT ALL
  INTO WISHLIST (USER_ID, SHOP_ID, NUM, ADDED_DATE) VALUES (1, 2, 2, TO_DATE('2024-12-07', 'YYYY-MM-DD'))
  INTO WISHLIST (USER_ID, SHOP_ID, NUM, ADDED_DATE) VALUES (2, 3, 1, TO_DATE('2024-12-07', 'YYYY-MM-DD'))
  INTO WISHLIST (USER_ID, SHOP_ID, NUM, ADDED_DATE) VALUES (3, 4, 2, TO_DATE('2024-12-08', 'YYYY-MM-DD'))
  INTO WISHLIST (USER_ID, SHOP_ID, NUM, ADDED_DATE) VALUES (5, 5, 1, TO_DATE('2024-12-08', 'YYYY-MM-DD'))
SELECT * FROM DUAL;

-- Recommend 테이블 샘플 데이터
INSERT ALL 
INTO RECOMMEND (USER_ID, SHOP_ID, NUM) VALUES (1, 1, 2)
INTO RECOMMEND (USER_ID, SHOP_ID, NUM) VALUES (1, 2, 1)
INTO RECOMMEND (USER_ID, SHOP_ID, NUM) VALUES (2, 3, 1)
INTO RECOMMEND (USER_ID, SHOP_ID, NUM) VALUES (3, 4, 1)
INTO RECOMMEND (USER_ID, SHOP_ID, NUM) VALUES (5, 5, 1)
INTO RECOMMEND (USER_ID, SHOP_ID, NUM) VALUES (7, 2, 2)
INTO RECOMMEND (USER_ID, SHOP_ID, NUM) VALUES (8, 3, 1)
SELECT * FROM DUAL;